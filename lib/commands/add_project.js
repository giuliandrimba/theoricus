// Generated by CoffeeScript 1.6.2
(function() {
  var AddProject, exec, fork, fs, path, pn, spawn;

  fs = require('fs');

  path = require('path');

  pn = path.normalize;

  exec = (require("child_process")).exec;

  spawn = (require("child_process")).spawn;

  fork = require("child_process").fork;

  module.exports = AddProject = (function() {
    function AddProject(the, cli) {
      var cmd,
        _this = this;

      this.the = the;
      this.cli = cli;
      if (this.cli.argv["new"] === true) {
        console.log("ERROR".bold.red + " You must specify a name for your project");
        return;
      }
      this.pwd = this.the.pwd;
      this.root = this.the.root;
      this.app_skel = path.join(this.the.root, 'cli', 'templates', 'app_skel');
      this.target = path.join(this.pwd, this.cli.argv["new"]);
      if (fs.existsSync(this.target)) {
        console.log("ERROR".bold.red + " Target directory already existis.");
        console.log(("\t" + this.target).yellow);
        return;
      }
      console.log('• Creating app skeleton'.grey);
      cmd = "cp -r " + this.app_skel + " " + this.target;
      exec(cmd, function(error, stdout, stderr) {
        if (error != null) {
          return console.log(error);
        }
        return _this.configure();
      });
    }

    AddProject.prototype.configure = function() {
      var branch, clone, deps, name, options, params, repo, the_www,
        _this = this;

      name = this.cli.argv["new"];
      if (this.cli.argv.src) {
        console.log('• Cloning theoricus source'.grey);
        deps = '';
        the_www = 'vendors/theoricus/www';
        repo = (this.cli.argv.src.match(/[^#]+/))[0];
        branch = (this.cli.argv.src.match(/#(.+)/))[1] || 'master';
        params = ['clone', "git@github.com:" + repo, "vendors/theoricus"];
        options = {
          cwd: this.target,
          stdio: 'inherit'
        };
        clone = spawn('git', params, options);
        clone.on('close', function(code) {
          var checkout, cwd;

          if (code > 0) {
            return;
          }
          params = ['checkout', repo];
          cwd = path.join(_this.target, 'vendors', 'theoricus');
          options = {
            cwd: cwd,
            stdio: 'inherit'
          };
          checkout = spawn('git', ['checkout', branch], options);
          return checkout.on('close', function(code) {
            var install;

            if (code > 0) {
              return;
            }
            install = spawn('npm', ['install'], options);
            return install.on('close', function(code) {
              return _this.write_config(name, deps, the_www);
            });
          });
        });
        return;
      }
      deps = "\"theoricus\": \"" + this.the.version + "\"";
      the_www = 'node_modules/theoricus/www';
      return this.write_config(name, deps, the_www);
    };

    AddProject.prototype.write_config = function(name, deps, the_www) {
      var pack, polvo;

      pack = path.join(this.the.root, 'cli', 'templates', 'config', 'package.json');
      pack = fs.readFileSync(pack, 'utf-8');
      pack = pack.replace('~name', this.cli.argv["new"]);
      pack = pack.replace('~deps', deps);
      polvo = path.join(this.the.root, 'cli', 'templates', 'config', 'polvo.coffee');
      polvo = fs.readFileSync(polvo, 'utf-8');
      polvo = polvo.replace('~theoricus-www', the_www);
      fs.writeFileSync(path.join(this.target, 'package.json'), pack);
      fs.writeFileSync(path.join(this.target, 'polvo.coffee'), polvo);
      return this.finish();
    };

    AddProject.prototype.finish = function() {
      var make;

      console.log('• App created, setting up'.grey);
      make = spawn('npm', ['install'], {
        cwd: this.target,
        stdio: 'inherit'
      });
      return make.on('close', function(code) {
        if (code > 0) {
          return;
        }
        console.log("\n\n★  Everything is ready!".cyan);
        console.log("• Remember to add your app details in 'package.json'".grey);
        return console.log('• Have a nice job!\n'.green.grey);
      });
    };

    return AddProject;

  })();

}).call(this);

/*
//@ sourceMappingURL=add_project.map
*/
