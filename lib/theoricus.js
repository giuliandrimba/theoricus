// Generated by CoffeeScript 1.6.2
(function() {
  var Cli, Compiler, Detroyer, Generator, NewProject, Server, Theoricus, colors, fs, path;

  require('source-map-support').install();

  fs = require("fs");

  path = require("path");

  colors = require('colors');

  require('../cli/vendors/inflection');

  Generator = require('./commands/generator');

  NewProject = require('./commands/new_project');

  Detroyer = require('./commands/destroyer');

  Server = require('./commands/server');

  Compiler = require('./commands/compiler');

  Cli = require('./cli');

  exports.run = function() {
    return new Theoricus;
  };

  module.exports = Theoricus = (function() {
    function Theoricus() {
      this.root = path.join(__dirname, "..");
      this.app_root = this._get_app_root();
      this.pwd = this.app_root || path.resolve(".");
      this.version = (require("./../package.json")).version;
      this.cli = new Cli(this.version);
      if (this.cli.argv["new"]) {
        return new NewProject(this, this.cli);
      }
      if (this.cli.argv.version) {
        return console.log(this.version);
      }
      if (this.cli.argv.generate) {
        return new Generator(this, this.cli);
      }
      if (this.cli.argv.destroy) {
        return new Detroyer(this, this.cli);
      }
      if (this.cli.argv.start) {
        return new Server(this, this.cli);
      }
      if (this.cli.argv.compile) {
        return new Compiler(this, this.cli);
      }
      if (this.cli.argv.release) {
        return new Compiler(this, this.cli, true);
      }
      if (this.cli.argv.preview) {
        return new Compiler(this, this.cli, true, true);
      }
      console.log(this.cli.opts.help() + this.cli.examples);
    }

    Theoricus.prototype.is_theoricus_app = function() {
      if (this.app_root === null) {
        console.log("ERROR".bold.red + " Not a Theoricus app.");
        return false;
      }
      return true;
    };

    Theoricus.prototype._get_app_root = function() {
      var app, contents, current, tmp;

      current = path.resolve(".");
      while (true) {
        app = path.join(current, 'src', 'app', 'app.coffee');
        if (fs.existsSync(app)) {
          contents = fs.readFileSync(app, "utf-8");
          if (contents.indexOf('extends Theoricus') > 0) {
            return current;
          } else {
            return null;
          }
        } else {
          tmp = path.normalize(path.join(current, '..'));
          if (current === tmp) {
            return null;
          } else {
            current = tmp;
            continue;
          }
        }
      }
    };

    return Theoricus;

  })();

}).call(this);

/*
//@ sourceMappingURL=theoricus.map
*/
