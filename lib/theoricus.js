// Generated by CoffeeScript 1.6.2
(function() {
  var Add, AddProject, Compiler, Rm, Server, Theoricus, colors, fs, path;

  require('source-map-support').install();

  fs = require("fs");

  path = require("path");

  colors = require('colors');

  require('../cli/vendors/inflection');

  Add = require('./commands/add');

  AddProject = require('./commands/add_project');

  Rm = require('./commands/rm');

  Server = require('./commands/server');

  Compiler = require('./commands/compiler');

  exports.run = function() {
    return new Theoricus;
  };

  module.exports = Theoricus = (function() {
    function Theoricus() {
      var cmd, cmds, options;

      this.root = path.join(__dirname, "..");
      this.app_root = this._get_app_root();
      this.pwd = this.app_root || path.resolve(".");
      this.version = (require("../package.json")).version;
      cmds = ("" + 'model'.cyan + '|'.white + 'view'.cyan + '|'.white) + ("" + 'controller'.cyan + '|'.white + 'mvc'.cyan);
      this.header = ("" + 'Theoricus'.bold + " ") + ("v" + this.version + "\nCoffeeScript MVC implementation for the browser + lazy navigation mechanism.\n\n").grey;
      this.header += "" + 'Usage:'.bold + "\n";
      this.header += "  theoricus " + 'new'.red + "      " + 'path'.green + "\n";
      this.header += "  theoricus " + 'add'.red + "      " + cmds + " \n";
      this.header += "  theoricus " + 'rm'.red + "       " + cmds + " \n";
      this.header += "  theoricus " + 'start'.red + "    \n";
      this.header += "  theoricus " + 'compile'.red + "  \n";
      this.header += "  theoricus " + 'release'.red + "  \n";
      this.header += "  theoricus " + 'preview'.red + "  \n";
      this.header += "" + 'Options:'.bold + "\n";
      this.header += "             " + 'new'.red + "   Creates a new working project in the file system.\n";
      this.header += "             " + 'add'.red + "   Generates a new model|view|controller file.\n";
      this.header += "              " + 'rm'.red + "   Destroy some model|view|controller file.\n";
      this.header += "           " + 'start'.red + "   Starts app at http://localhost in watch'n'compile.\n";
      this.header += "         " + 'compile'.red + "   Build app in development mode.\n";
      this.header += "         " + 'release'.red + "   Build app in release mode.\n";
      this.header += "         " + 'preview'.red + "   Build app in release mode at http://localhost.\n";
      this.header += "         " + 'version'.red + "   Show theoricus version.\n";
      this.header += "            " + 'help'.red + "   Show this help screen.\n";
      options = process.argv.slice(2);
      cmd = options.join(" ").match(/([a-z]+)/);
      cmd = cmd != null ? cmd[1] : 'help';
      if (this.app_root === null && cmd !== "help" && cmd !== "new") {
        console.log("ERROR".bold.red + " Not a Theoricus app.");
        return;
      }
      switch (cmd) {
        case "new":
          new AddProject(this, options);
          break;
        case "add":
          new Add(this, options);
          break;
        case "rm":
          new Rm(this, options);
          break;
        case "start":
          new Server(this, options);
          break;
        case "compile":
          new Compiler(this, options);
          break;
        case "release":
          new Compiler(this, options, true);
          break;
        case "preview":
          new Compiler(this, options, true, true);
          break;
        case "version":
          console.log(this.version);
          break;
        default:
          console.log(this.header);
      }
    }

    Theoricus.prototype._get_app_root = function() {
      var app, contents, current, tmp;

      current = path.resolve(".");
      while (true) {
        app = path.normalize("" + current + "/src/app/app.coffee");
        if (fs.existsSync(app)) {
          contents = fs.readFileSync(app, "utf-8");
          if (contents.indexOf('extends Theoricus') > 0) {
            return current;
          } else {
            return null;
          }
        } else {
          tmp = path.normalize(path.join(current, '..'));
          if (current === tmp) {
            return null;
          } else {
            current = tmp;
            continue;
          }
        }
      }
    };

    return Theoricus;

  })();

}).call(this);

/*
//@ sourceMappingURL=theoricus.map
*/
